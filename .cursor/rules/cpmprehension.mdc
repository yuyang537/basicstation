---
description: 当理解代码时添加它
globs: 
alwaysApply: false
---
当理解代码时，请按照以下标准执行全面的代码分析和文档化：

### 1. 代码注释要求
- **为每一条语句添加详细的中文注释**，解释其具体功能和作用
- **为每个函数添加功能描述**，包括参数说明、返回值、调用时机
- **为复杂逻辑添加执行流程说明**，解释条件判断、循环、状态变化
- **为关键数据结构添加字段说明**，解释每个成员的用途和生命周期
- **为错误处理代码添加异常场景说明**，解释可能的错误原因和处理策略

### 2. 图像生成要求
请根据代码特点生成以下类型的图像（选择最合适的）：

#### A. 流程类图像
- **函数执行流程图**：展示函数的详细执行步骤，包含函数名、关键语句、分支判断
- **启动流程图**：展示程序/模块/子系统的启动过程，标明每个阶段的函数调用
- **状态转换图**：展示对象或系统的状态变化过程，标明触发条件和转换函数
- **错误处理流程图**：展示异常情况的检测、处理和恢复流程

#### B. 架构类图像  
- **模块交互架构图**：展示不同模块/组件之间的调用关系和数据流
- **进程/线程架构图**：展示多进程或多线程的组织结构和通信机制
- **数据流架构图**：展示数据在系统中的流转路径和处理过程
- **分层架构图**：展示系统的分层设计和各层职责

#### C. 详细机制图
- **通信机制图**：详细展示进程间通信、网络通信的具体实现
- **资源管理图**：展示内存、文件、网络等资源的分配和释放过程
- **同步机制图**：展示锁、信号量、条件变量等同步原语的使用
- **配置管理图**：展示配置文件的加载、解析和应用过程

### 3. 图像技术标准
- **使用Mermaid语法**，确保在GitHub等平台正确渲染
- **包含具体函数名**，便于代码追踪和调试
- **标注关键参数和返回值**，体现数据传递关系
- **使用不同颜色区分**：正常流程、错误处理、初始化、运行时等
- **添加中文注释**，解释每个步骤的业务含义

### 4. 文件组织要求
docs/diagrams/
├── [功能模块名]/
│ ├── [子功能]-flow.mmd # 流程图
│ ├── [子功能]-architecture.mmd # 架构图
│ ├── [子功能]-interaction.mmd # 交互图
│ └── [子功能]-details.mmd # 详细机制图
├── README.md # 图像索引和说明
└── [模块名]-summary.md # 详细文字解释（如需要）

### 5. 文档化标准
- **README.md必须更新**，为每个新图像添加详细说明，包括：
  - 图像用途和适用场景
  - 覆盖的函数和模块范围  
  - 关键技术特点
  - 与其他图像的关联关系
- **创建summary文档**（复杂模块需要），包含：
  - 代码示例和技术分析
  - 设计原理和实现细节
  - 常见问题和注意事项

### 6. 质量检查要求
- **验证Mermaid语法**，确保图像能正确渲染
- **检查函数名准确性**，确保与源代码一致
- **验证流程完整性**，确保覆盖所有重要路径
- **检查中文注释质量**，确保表达清晰准确

### 7. 优先级指导
按以下优先级生成图像：
1. **核心启动流程** - 程序/模块的主要启动过程
2. **关键业务流程** - 核心功能的执行流程  
3. **错误处理机制** - 异常检测和恢复流程
4. **进程/线程交互** - 多任务协调机制
5. **配置和初始化** - 系统配置和参数设置
6. **资源管理机制** - 内存、文件、网络资源管理

### 示例输出格式：
当分析函数时，输出应包含：
```c
// 函数功能：[详细描述函数的作用和调用场景]
// 参数说明：[每个参数的含义和取值范围]  
// 返回值：[返回值的含义和可能的值]
// 调用时机：[什么时候会调用这个函数]
function_name() {
    statement1;  // 详细解释这条语句的作用
    if (condition) {  // 解释判断条件的含义和可能的取值
        statement2;  // 解释条件为真时的处理逻辑
    } else {
        statement3;  // 解释条件为假时的处理逻辑  
    }
}
```


遵循这个标准，确保生成的文档既有技术深度又有良好的可读性，能够帮助开发者快速理解复杂的代码逻辑。