/*
 * 关键字CRC生成表 - 自动生成文件，请勿手动修改！
 * ================================================
 * 文件说明：由genkwcrcs工具自动生成的关键字CRC映射表
 * 核心功能：为JSON解析提供高性能的字符串匹配机制
 * 设计目标：将字符串比较转换为数值比较，大幅提升解析速度
 * 
 * 技术原理：
 * 1. 使用自定义CRC算法为每个关键字生成唯一的32位哈希值
 * 2. 支持JSON字段名的快速匹配，避免字符串逐字符比较
 * 3. 采用增量CRC更新机制，支持流式字符串处理
 * 4. 使用特殊的CRC完成算法，确保零值哈希映射为1
 * 
 * 性能优势：
 * - 字符串匹配时间复杂度：O(1) vs O(n)
 * - 内存访问模式优化：连续内存访问
 * - 分支预测友好：减少条件判断
 */

// Auto generated by genkwcrcs - DO NOT CHANGE!

// ==============================================
// CRC算法核心宏定义
// ==============================================

/**
 * UJ_UPDATE_CRC - 增量CRC计算宏
 * 参数：
 *   crc - 当前CRC值
 *   c   - 新输入字符
 * 功能：
 *   1. 使用自定义多项式进行CRC更新
 *   2. 采用查表法的简化版本，使用数学运算代替查表
 *   3. 支持ASCII字符的7位有效数据（c&0x7F）
 *   4. 使用65537和257作为CRC更新的magic number
 * 算法特点：
 *   - 快速计算，无需预生成CRC表
 *   - 良好的散列分布特性
 *   - 适合短字符串的哈希计算
 */
#define UJ_UPDATE_CRC(crc,c) ((((crc)>>(32-8))*65537) ^ ((crc)*257) ^ ((c)&0x7F))

/**
 * UJ_FINISH_CRC - CRC计算完成宏
 * 参数：crc - 计算完成的CRC值
 * 返回值：最终的CRC哈希值，保证非零
 * 功能：
 *   1. 处理CRC计算的边界情况
 *   2. 确保零值CRC被映射为1，避免与未初始化值混淆
 *   3. 提供一致的哈希值输出接口
 */
#define UJ_FINISH_CRC(crc)   ((crc) ? (crc) : 1)

// ==============================================
// JSON关键字CRC映射表
// ==============================================
// 以下常量定义了BasicStation中所有JSON关键字的CRC值
// 每个J_xxx常量对应一个JSON字段名的CRC哈希值
// 使用时通过uj_keyword()函数计算字符串CRC，然后与这些常量比较

// ---------------- 核心配置关键字 ----------------
#define J_addcrc               ((ujcrc_t)(0x1991DA5B))  // "addcrc" - 添加CRC校验
#define J_antenna_gain         ((ujcrc_t)(0xB5F37EF4))  // "antenna_gain" - 天线增益
#define J_antenna_type         ((ujcrc_t)(0x7D4274ED))  // "antenna_type" - 天线类型
#define J_api                  ((ujcrc_t)(0x00617278))  // "api" - API接口版本
#define J_arguments            ((ujcrc_t)(0x5ACAD020))  // "arguments" - 命令参数
#define J_config               ((ujcrc_t)(0xF7A3E35F))  // "config" - 配置信息
#define J_device               ((ujcrc_t)(0xF0921352))  // "device" - 设备标识
#define J_device_mode          ((ujcrc_t)(0x2DB3FCE7))  // "device_mode" - 设备模式
#define J_enable               ((ujcrc_t)(0x0697E35F))  // "enable" - 启用标志
#define J_error                ((ujcrc_t)(0x47A7EB1D))  // "error" - 错误信息
#define J_version              ((ujcrc_t)(0x00E51D6C))  // "version" - 版本号

// ---------------- 地区和频段配置 ----------------
#define J_AS923                ((ujcrc_t)(0xD653976B))  // "AS923" - 亚洲923MHz频段
#define J_AS923_1              ((ujcrc_t)(0x66169288))  // "AS923_1" - AS923子频段1
#define J_AS923JP              ((ujcrc_t)(0x6616F98E))  // "AS923JP" - 日本AS923频段
#define J_AU915                ((ujcrc_t)(0xD8599E68))  // "AU915" - 澳洲915MHz频段
#define J_CN470                ((ujcrc_t)(0xD75F977D))  // "CN470" - 中国470MHz频段
#define J_CN779                ((ujcrc_t)(0xD75E9777))  // "CN779" - 中国779MHz频段
#define J_EU433                ((ujcrc_t)(0xE0569061))  // "EU433" - 欧洲433MHz频段
#define J_EU863                ((ujcrc_t)(0xE0529B68))  // "EU863" - 欧洲863MHz频段
#define J_EU868                ((ujcrc_t)(0xE0529B63))  // "EU868" - 欧洲868MHz频段
#define J_IL915                ((ujcrc_t)(0xE1689771))  // "IL915" - 以色列915MHz频段
#define J_KR920                ((ujcrc_t)(0xFB789669))  // "KR920" - 韩国920MHz频段
#define J_US902                ((ujcrc_t)(0x061FA968))  // "US902" - 美国902MHz频段
#define J_US915                ((ujcrc_t)(0x061FA86E))  // "US915" - 美国915MHz频段
#define J_region               ((ujcrc_t)(0xF5F71604))  // "region" - 地区标识
#define J_regionid             ((ujcrc_t)(0xE6FFB211))  // "regionid" - 地区ID

// ---------------- 网络和通信配置 ----------------
#define J_beaconing            ((ujcrc_t)(0x58428CA7))  // "beaconing" - 信标发送
#define J_bcning               ((ujcrc_t)(0x1EE5E245))  // "bcning" - 信标发送简写
#define J_DevEui               ((ujcrc_t)(0x0F01F1A4))  // "DevEui" - 设备EUI（首字母大写）
#define J_DevEUI               ((ujcrc_t)(0x0F01D1A4))  // "DevEUI" - 设备EUI（全大写）
#define J_JoinEui              ((ujcrc_t)(0x5B616676))  // "JoinEui" - 入网EUI（首字母大写）
#define J_JoinEUI              ((ujcrc_t)(0x5B618676))  // "JoinEUI" - 入网EUI（全大写）
#define J_NetID                ((ujcrc_t)(0x16D1EE1C))  // "NetID" - 网络ID
#define J_euiprefix            ((ujcrc_t)(0x9D5E0C96))  // "euiprefix" - EUI前缀
#define J_disconnect           ((ujcrc_t)(0x508A92A9))  // "disconnect" - 断开连接
#define J_reconnect            ((ujcrc_t)(0xD965FF91))  // "reconnect" - 重新连接

// ---------------- 消息和数据传输 ----------------
#define J_dnmode               ((ujcrc_t)(0xFB97E55A))  // "dnmode" - 下行模式
#define J_dnframe              ((ujcrc_t)(0xF7095424))  // "dnframe" - 下行帧
#define J_dnmsg                ((ujcrc_t)(0x37C3E917))  // "dnmsg" - 下行消息
#define J_dnsched              ((ujcrc_t)(0xFDEA5B35))  // "dnsched" - 下行调度
#define J_dntxed               ((ujcrc_t)(0x12FBF954))  // "dntxed" - 下行已发送
#define J_msgid                ((ujcrc_t)(0x66901419))  // "msgid" - 消息ID
#define J_msgtype              ((ujcrc_t)(0xBD07399C))  // "msgtype" - 消息类型
#define J_pdu                  ((ujcrc_t)(0x00708461))  // "pdu" - 协议数据单元
#define J_updf                 ((ujcrc_t)(0x75EFDB07))  // "updf" - 上行数据帧

// ---------------- 射频和天线配置 ----------------
#define J_freq                 ((ujcrc_t)(0x66E0EB00))  // "freq" - 频率（小写）
#define J_Freq                 ((ujcrc_t)(0x46C0CB20))  // "Freq" - 频率（首字母大写）
#define J_freqs                ((ujcrc_t)(0x47ADEB15))  // "freqs" - 频率列表
#define J_freq_range           ((ujcrc_t)(0x38A2732C))  // "freq_range" - 频率范围
#define J_rf_chain             ((ujcrc_t)(0x3497D91E))  // "rf_chain" - 射频链路
#define J_rf_power             ((ujcrc_t)(0x95FCE8DC))  // "rf_power" - 射频功率
#define J_txpow_adjust         ((ujcrc_t)(0x03E0F6FD))  // "txpow_adjust" - 发送功率调整
#define J_pa_gain              ((ujcrc_t)(0xDEE8634E))  // "pa_gain" - 功率放大器增益
#define J_mix_gain             ((ujcrc_t)(0xC7F3BD05))  // "mix_gain" - 混频器增益
#define J_dac_gain             ((ujcrc_t)(0xB95BD71D))  // "dac_gain" - DAC增益
#define J_dig_gain             ((ujcrc_t)(0x1932BE8A))  // "dig_gain" - 数字增益

// ---------------- 时间同步和定位 ----------------
#define J_gps                  ((ujcrc_t)(0x00677E64))  // "gps" - GPS定位
#define J_gpstime              ((ujcrc_t)(0xCC004EB5))  // "gpstime" - GPS时间
#define J_getxtime             ((ujcrc_t)(0x286076CA))  // "getxtime" - 获取扩展时间
#define J_timesync             ((ujcrc_t)(0xD3CACC10))  // "timesync" - 时间同步
#define J_txtime               ((ujcrc_t)(0x02CB1104))  // "txtime" - 发送时间
#define J_xtime                ((ujcrc_t)(0x759DF115))  // "xtime" - 扩展时间
#define J_ontime               ((ujcrc_t)(0xF9E41F34))  // "ontime" - 精确时间
#define J_MuxTime              ((ujcrc_t)(0x8F6686E3))  // "MuxTime" - 复用时间
#define J_no_gps_capture       ((ujcrc_t)(0xDEA1F99B))  // "no_gps_capture" - 禁用GPS捕获
#define J_pps                  ((ujcrc_t)(0x00707073))  // "pps" - 秒脉冲信号

// ---------------- 数据速率和调制参数 ----------------
#define J_DR                   ((ujcrc_t)(0x00004416))  // "DR" - 数据速率
#define J_DRs                  ((ujcrc_t)(0x00445A65))  // "DRs" - 数据速率列表
#define J_datarate             ((ujcrc_t)(0xFC3A1C24))  // "datarate" - 数据速率
#define J_spread_factor        ((ujcrc_t)(0xD933EFAA))  // "spread_factor" - 扩频因子
#define J_bandwidth            ((ujcrc_t)(0x0188BDD4))  // "bandwidth" - 带宽
#define J_bit_rate             ((ujcrc_t)(0xED4AA68B))  // "bit_rate" - 比特率
#define J_preamble             ((ujcrc_t)(0x05167D25))  // "preamble" - 前导码

// ---------------- 接收窗口配置 ----------------
#define J_RX1DR                ((ujcrc_t)(0x0114167F))  // "RX1DR" - RX1数据速率
#define J_RX1Freq              ((ujcrc_t)(0x3E8FAA5D))  // "RX1Freq" - RX1频率
#define J_RX2DR                ((ujcrc_t)(0x0111107C))  // "RX2DR" - RX2数据速率
#define J_RX2Freq              ((ujcrc_t)(0x3480AA59))  // "RX2Freq" - RX2频率
#define J_RxDelay              ((ujcrc_t)(0xCDE79F00))  // "RxDelay" - 接收延迟

// ---------------- 信道访问控制 ----------------
#define J_cca                  ((ujcrc_t)(0x00636361))  // "cca" - 清空信道评估
#define J_nocca                ((ujcrc_t)(0x4CC0D20E))  // "nocca" - 禁用CCA
#define J_duty_cycle           ((ujcrc_t)(0x18855C82))  // "duty_cycle" - 占空比
#define J_nodc                 ((ujcrc_t)(0x6EDDD406))  // "nodc" - 禁用占空比
#define J_nodwell              ((ujcrc_t)(0xB6A53879))  // "nodwell" - 禁用驻留时间
#define J_threshold            ((ujcrc_t)(0xB76BCE9C))  // "threshold" - 阈值

// ---------------- 系统控制和管理 ----------------
#define J_hello                ((ujcrc_t)(0x46DBE30A))  // "hello" - 握手消息
#define J_command              ((ujcrc_t)(0xA46E40CA))  // "command" - 命令
#define J_shell                ((ujcrc_t)(0x767A1E0A))  // "shell" - 命令行接口
#define J_cmd                  ((ujcrc_t)(0x0063716A))  // "cmd" - 命令简写
#define J_runcmd               ((ujcrc_t)(0x1EF2012F))  // "runcmd" - 运行命令
#define J_start                ((ujcrc_t)(0x61BEF413))  // "start" - 启动
#define J_stop                 ((ujcrc_t)(0x73EDE218))  // "stop" - 停止
#define J_restart              ((ujcrc_t)(0xFFFF1F62))  // "restart" - 重启
#define J_reboot               ((ujcrc_t)(0xF6CE1F1D))  // "reboot" - 重启系统
#define J_term                 ((ujcrc_t)(0x74F9E80E))  // "term" - 终止

// ---------------- 网络服务配置 ----------------
#define J_server_address       ((ujcrc_t)(0x338DDCAD))  // "server_address" - 服务器地址
#define J_serv_port            ((ujcrc_t)(0x7405B388))  // "serv_port" - 服务端口
#define J_uri                  ((ujcrc_t)(0x00757C6E))  // "uri" - 统一资源标识符
#define J_infos_uri            ((ujcrc_t)(0xE3215635))  // "infos_uri" - 信息服务URI
#define J_cups_uri             ((ujcrc_t)(0x594AB0B8))  // "cups_uri" - CUPS服务URI
#define J_domain               ((ujcrc_t)(0x0590E65C))  // "domain" - 域名
#define J_user                 ((ujcrc_t)(0x75F0DE11))  // "user" - 用户名

// ---------------- Web服务配置 ----------------
#define J_web_port             ((ujcrc_t)(0xA9963701))  // "web_port" - Web服务端口
#define J_web_dir              ((ujcrc_t)(0xCDD77DAA))  // "web_dir" - Web服务目录

// ---------------- 日志和调试 ----------------
#define J_log_file             ((ujcrc_t)(0x7886C6B6))  // "log_file" - 日志文件
#define J_log_level            ((ujcrc_t)(0x7B397448))  // "log_level" - 日志级别
#define J_log_rotate           ((ujcrc_t)(0x240F1106))  // "log_rotate" - 日志轮转
#define J_log_size             ((ujcrc_t)(0x6453ABB5))  // "log_size" - 日志大小

// ---------------- 优先级和调度 ----------------
#define J_priority             ((ujcrc_t)(0xF00C8E15))  // "priority" - 优先级
#define J_schedule             ((ujcrc_t)(0xDEEAC928))  // "schedule" - 调度
#define J_seqno                ((ujcrc_t)(0x709FF915))  // "seqno" - 序列号
#define J_asap                 ((ujcrc_t)(0x61D4E603))  // "asap" - 尽快执行

// ---------------- 硬件配置相关 ----------------
#define J_hwspec               ((ujcrc_t)(0xE3C2202A))  // "hwspec" - 硬件规格
#define J_gateway_conf         ((ujcrc_t)(0x186A380C))  // "gateway_conf" - 网关配置
#define J_radio_conf           ((ujcrc_t)(0xBA23370B))  // "radio_conf" - 射频配置
#define J_radio_init           ((ujcrc_t)(0xA4224015))  // "radio_init" - 射频初始化
#define J_station_conf         ((ujcrc_t)(0xE4AA60B9))  // "station_conf" - 基站配置
#define J_router_config        ((ujcrc_t)(0xE5E7E58E))  // "router_config" - 路由器配置

// ---------------- 其他系统参数 ----------------
#define J_dC                   ((ujcrc_t)(0x00006427))  // "dC" - 占空比参数
#define J_diid                 ((ujcrc_t)(0x64D5D500))  // "diid" - 设备交互ID
#define J_if                   ((ujcrc_t)(0x0000690F))  // "if" - 接口参数
#define J_layout               ((ujcrc_t)(0x11950A24))  // "layout" - 布局配置
#define J_max_eirp             ((ujcrc_t)(0x60B4BA83))  // "max_eirp" - 最大等效辐射功率
#define J_muxs                 ((ujcrc_t)(0x6DF2E513))  // "muxs" - 多路复用
#define J_radio                ((ujcrc_t)(0x6A861A03))  // "radio" - 射频模块
#define J_rctx                 ((ujcrc_t)(0x72F5E81D))  // "rctx" - 请求上下文
#define J_rmtsh                ((ujcrc_t)(0x77731403))  // "rmtsh" - 远程Shell
#define J_router               ((ujcrc_t)(0xFEE91D0C))  // "router" - 路由器
#define J_routerid             ((ujcrc_t)(0xE1C9C417))  // "routerid" - 路由器ID
#define J_type                 ((ujcrc_t)(0x74F5FE18))  // "type" - 类型
#define J_upchannels           ((ujcrc_t)(0x7FCAA9EB))  // "upchannels" - 上行信道
#define J_upgrade              ((ujcrc_t)(0xF49BF544))  // "upgrade" - 升级

// ---------------- 射频芯片和配置 ----------------
#define J_chan_FSK             ((ujcrc_t)(0x399777C1))  // "chan_FSK" - FSK信道
#define J_chan_Lora_std        ((ujcrc_t)(0xAE60A484))  // "chan_Lora_std" - 标准LoRa信道
#define J_clksrc               ((ujcrc_t)(0x028CF35C))  // "clksrc" - 时钟源
#define J_lorawan_public       ((ujcrc_t)(0xF6ECACD6))  // "lorawan_public" - LoRaWAN公网
#define J_radio_0              ((ujcrc_t)(0xBA1753F6))  // "radio_0" - 射频模块0
#define J_radio_1              ((ujcrc_t)(0xBA1753F7))  // "radio_1" - 射频模块1
#define J_rssi_offset          ((ujcrc_t)(0x2C99BDFE))  // "rssi_offset" - RSSI偏移
#define J_rssi_offset_lbt      ((ujcrc_t)(0xAFDE7647))  // "rssi_offset_lbt" - LBT RSSI偏移

// ---------------- SX系列芯片支持 ----------------
#define J_SX1250               ((ujcrc_t)(0x1FBE0E5B))  // "SX1250" - SX1250芯片
#define J_SX1255               ((ujcrc_t)(0x1FBE0E5E))  // "SX1255" - SX1255芯片
#define J_SX1257               ((ujcrc_t)(0x1FBE0E5C))  // "SX1257" - SX1257芯片
#define J_SX1272               ((ujcrc_t)(0x1FBE0C5B))  // "SX1272" - SX1272芯片
#define J_SX1276               ((ujcrc_t)(0x1FBE0C5F))  // "SX1276" - SX1276芯片
#define J_sx1301_conf          ((ujcrc_t)(0x2AF5BD41))  // "sx1301_conf" - SX1301配置（小写）
#define J_SX1301_conf          ((ujcrc_t)(0xCF76EBC6))  // "SX1301_conf" - SX1301配置（大写）
#define J_sx1302_conf          ((ujcrc_t)(0x2BF4BF45))  // "sx1302_conf" - SX1302配置（小写）
#define J_SX1302_conf          ((ujcrc_t)(0x76DDEBC0))  // "SX1302_conf" - SX1302配置（大写）

// ---------------- 同步和传输参数 ----------------
#define J_sync_word            ((ujcrc_t)(0xA4BF704D))  // "sync_word" - 同步字
#define J_sync_word_size       ((ujcrc_t)(0xE6AAAB54))  // "sync_word_size" - 同步字大小
#define J_tx_enable            ((ujcrc_t)(0x631F9A2D))  // "tx_enable" - 发送使能
#define J_tx_gain_lut          ((ujcrc_t)(0x43B971DB))  // "tx_gain_lut" - 发送增益查找表
#define J_tx_notch_freq        ((ujcrc_t)(0xA8FCE052))  // "tx_notch_freq" - 发送陷波频率
#define J_pwr_idx              ((ujcrc_t)(0xDFD7588B))  // "pwr_idx" - 功率索引

// ---------------- 温度补偿参数 ----------------
#define J_rssi_tcomp           ((ujcrc_t)(0x47CB0C8F))  // "rssi_tcomp" - RSSI温度补偿
#define J_coeff_a              ((ujcrc_t)(0x87785402))  // "coeff_a" - 系数A
#define J_coeff_b              ((ujcrc_t)(0x87785401))  // "coeff_b" - 系数B
#define J_coeff_c              ((ujcrc_t)(0x87785400))  // "coeff_c" - 系数C
#define J_coeff_d              ((ujcrc_t)(0x87785407))  // "coeff_d" - 系数D
#define J_coeff_e              ((ujcrc_t)(0x87785406))  // "coeff_e" - 系数E

// ---------------- 隐式头部参数 ----------------
#define J_implicit_hdr         ((ujcrc_t)(0xC842AB12))  // "implicit_hdr" - 隐式头部
#define J_implicit_payload_length ((ujcrc_t)(0xA83D6605))  // "implicit_payload_length" - 隐式载荷长度
#define J_implicit_crc_en      ((ujcrc_t)(0x531037C1))  // "implicit_crc_en" - 隐式CRC使能
#define J_implicit_coderate    ((ujcrc_t)(0x644EF1C1))  // "implicit_coderate" - 隐式编码率

// ---------------- 发送查找表 ----------------
#define J_tx_lut               ((ujcrc_t)(0x25A75023))  // "tx_lut" - 发送查找表
#define J_fpga_dig_gain        ((ujcrc_t)(0xB17E4194))  // "fpga_dig_gain" - FPGA数字增益

// ---------------- AD9361参数 ----------------
#define J_ad9361_atten         ((ujcrc_t)(0x6EA72BD1))  // "ad9361_atten" - AD9361衰减
#define J_ad9361_auxdac_vref   ((ujcrc_t)(0x21E8657E))  // "ad9361_auxdac_vref" - AD9361辅助DAC参考电压
#define J_ad9361_auxdac_word   ((ujcrc_t)(0x20EC6177))  // "ad9361_auxdac_word" - AD9361辅助DAC字
#define J_ad9361_tcomp_coeff_a ((ujcrc_t)(0x555897EE))  // "ad9361_tcomp_coeff_a" - AD9361温度补偿系数A
#define J_ad9361_tcomp_coeff_b ((ujcrc_t)(0x555897ED))  // "ad9361_tcomp_coeff_b" - AD9361温度补偿系数B

// ---------------- 射频链路配置 ----------------
#define J_rf_chain_conf        ((ujcrc_t)(0xDF35B2E0))  // "rf_chain_conf" - 射频链路配置
#define J_rx_enable            ((ujcrc_t)(0x73858A63))  // "rx_enable" - 接收使能
#define J_rssi_offset_coeff_a  ((ujcrc_t)(0x11C37A14))  // "rssi_offset_coeff_a" - RSSI偏移系数A
#define J_rssi_offset_coeff_b  ((ujcrc_t)(0x11C37A17))  // "rssi_offset_coeff_b" - RSSI偏移系数B
#define J_tx_freq_min          ((ujcrc_t)(0xA3956A08))  // "tx_freq_min" - 发送频率最小值
#define J_tx_freq_max          ((ujcrc_t)(0xA3957216))  // "tx_freq_max" - 发送频率最大值

// ---------------- LBT配置 ----------------
#define J_lbt_conf             ((ujcrc_t)(0x5AA8CB99))  // "lbt_conf" - LBT配置
#define J_rssi_target          ((ujcrc_t)(0xD983A9C2))  // "rssi_target" - RSSI目标值
#define J_rssi_shift           ((ujcrc_t)(0x40F516B1))  // "rssi_shift" - RSSI偏移
#define J_chan_cfg             ((ujcrc_t)(0x39BA8AFD))  // "chan_cfg" - 信道配置
#define J_freq_hz              ((ujcrc_t)(0xD4F73A99))  // "freq_hz" - 频率（Hz）
#define J_scan_time_us         ((ujcrc_t)(0xB4392EF2))  // "scan_time_us" - 扫描时间（微秒）

// ---------------- SX1301芯片配置 ----------------
#define J_chip_enable          ((ujcrc_t)(0x887A9A91))  // "chip_enable" - 芯片使能
#define J_chip_center_freq     ((ujcrc_t)(0xE016F2A3))  // "chip_center_freq" - 芯片中心频率
#define J_chip_rf_chain        ((ujcrc_t)(0xC99D90A0))  // "chip_rf_chain" - 芯片射频链路

// ---------------- 多扩频因子信道 ----------------
#define J_chan_multiSF_0       ((ujcrc_t)(0x0A1E99ED))  // "chan_multiSF_0" - 多SF信道0
#define J_chan_multiSF_1       ((ujcrc_t)(0x0A1E99EC))  // "chan_multiSF_1" - 多SF信道1
#define J_chan_multiSF_2       ((ujcrc_t)(0x0A1E99EF))  // "chan_multiSF_2" - 多SF信道2
#define J_chan_multiSF_3       ((ujcrc_t)(0x0A1E99EE))  // "chan_multiSF_3" - 多SF信道3
#define J_chan_multiSF_4       ((ujcrc_t)(0x0A1E99E9))  // "chan_multiSF_4" - 多SF信道4
#define J_chan_multiSF_5       ((ujcrc_t)(0x0A1E99E8))  // "chan_multiSF_5" - 多SF信道5
#define J_chan_multiSF_6       ((ujcrc_t)(0x0A1E99EB))  // "chan_multiSF_6" - 多SF信道6
#define J_chan_multiSF_7       ((ujcrc_t)(0x0A1E99EA))  // "chan_multiSF_7" - 多SF信道7

// ---------------- 标准信道配置 ----------------
#define J_chan_LoRa_std        ((ujcrc_t)(0x8CA425D4))  // "chan_LoRa_std" - 标准LoRa信道
#define J_chan_rx_freq         ((ujcrc_t)(0x06FCFE18))  // "chan_rx_freq" - 信道接收频率

// ---------------- 数组配置 ----------------
#define J_SX1301_array_conf    ((ujcrc_t)(0x0A4F4BCE))  // "SX1301_array_conf" - SX1301数组配置
#define J_board_type           ((ujcrc_t)(0xB6BB08C7))  // "board_type" - 板型
#define J_board_rx_freq        ((ujcrc_t)(0xE7946A94))  // "board_rx_freq" - 板接收频率
#define J_board_rx_bw          ((ujcrc_t)(0x6E5A1327))  // "board_rx_bw" - 板接收带宽
#define J_full_duplex          ((ujcrc_t)(0x3CC1F742))  // "full_duplex" - 全双工
#define J_FSK_sync             ((ujcrc_t)(0x6CFE62EF))  // "FSK_sync" - FSK同步
#define J_loramac_public       ((ujcrc_t)(0x42F0CD46))  // "loramac_public" - LoRaMAC公网

// ---------------- DSP和处理 ----------------
#define J_nb_dsp               ((ujcrc_t)(0x2F8B2E0D))  // "nb_dsp" - DSP数量
#define J_dsp_stat_interval    ((ujcrc_t)(0x26D3D0B1))  // "dsp_stat_interval" - DSP统计间隔
#define J_aes_key              ((ujcrc_t)(0xD9FE95FC))  // "aes_key" - AES密钥

// ---------------- 校准参数 ----------------
#define J_calibration_temperature_celsius_room ((ujcrc_t)(0x8D9594E4))  // "calibration_temperature_celsius_room" - 室温校准温度
#define J_calibration_temperature_code_ad9361 ((ujcrc_t)(0x2D301DEC))   // "calibration_temperature_code_ad9361" - AD9361温度校准码
#define J_fpga_flavor          ((ujcrc_t)(0x1A5CFA3E))  // "fpga_flavor" - FPGA型号

// ---------------- SX1388系列配置 ----------------
#define J_SX1388_A11           ((ujcrc_t)(0x7D70D2A0))  // "SX1388_A11" - SX1388 A11版本
#define J_SX1388_SAGEMCOM      ((ujcrc_t)(0xD7A4F74B))  // "SX1388_SAGEMCOM" - SX1388 Sagemcom版本
#define J_SX1388_B11           ((ujcrc_t)(0x7D73CEA3))  // "SX1388_B11" - SX1388 B11版本
#define J_SX1388_KERLINK       ((ujcrc_t)(0xEBC39360))  // "SX1388_KERLINK" - SX1388 Kerlink版本
#define J_SX1388_C11           ((ujcrc_t)(0x7D72CEA2))  // "SX1388_C11" - SX1388 C11版本
#define J_SX1388_CISCO         ((ujcrc_t)(0x4432F439))  // "SX1388_CISCO" - SX1388 Cisco版本
#define J_SX1388_E11           ((ujcrc_t)(0x7D7CD2A4))  // "SX1388_E11" - SX1388 E11版本
#define J_SX1388_SEMTECH       ((ujcrc_t)(0xE9AC9268))  // "SX1388_SEMTECH" - SX1388 Semtech版本
#define J_SX1388_F11           ((ujcrc_t)(0x7D7FCEA7))  // "SX1388_F11" - SX1388 F11版本
#define J_SX1388_FOXCONN       ((ujcrc_t)(0x9CA462ED))  // "SX1388_FOXCONN" - SX1388 Foxconn版本
#define J_SX1388_L11           ((ujcrc_t)(0x7D75D2AD))  // "SX1388_L11" - SX1388 L11版本
#define J_SX1388_MULTITECH     ((ujcrc_t)(0xA42F71FA))  // "SX1388_MULTITECH" - SX1388 MultiTech版本

// ---------------- LBT和频段 ----------------
#define J_lbt_enable           ((ujcrc_t)(0x1C7A0E2A))  // "lbt_enable" - LBT使能
#define J_freq_band            ((ujcrc_t)(0xB067FA9A))  // "freq_band" - 频段
#define J_rx_freq              ((ujcrc_t)(0xEB1D6E55))  // "rx_freq" - 接收频率

// ---------------- WiFi配置 ----------------
#define J_wifi_cfg             ((ujcrc_t)(0xA90D75DA))  // "wifi_cfg" - WiFi配置
#define J_wifi_scan            ((ujcrc_t)(0xE63F210E))  // "wifi_scan" - WiFi扫描
#define J_wifi_ssid            ((ujcrc_t)(0xE60F391C))  // "wifi_ssid" - WiFi SSID
#define J_wifi_pass            ((ujcrc_t)(0xE13C3600))  // "wifi_pass" - WiFi密码
